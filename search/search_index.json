{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#home","title":"Home","text":"<ul> <li>HTML</li> <li>CSS</li> </ul>"},{"location":"databases/_index/","title":"Databases","text":""},{"location":"databases/_index/#list-of-databases","title":"List of Databases","text":""},{"location":"databases/core-concepts/","title":"Core Concepts","text":""},{"location":"databases/core-concepts/#database-management-system-dbms","title":"Database Management System (DBMS)","text":"<ul> <li>Normalization is a database - https://www.youtube.com/watch?v=o8HgXxqsYBc&amp;ab_channel=EngineeringDigest</li> <li>Indexing in database -</li> <li>Database Sharding and Partitioning</li> </ul>"},{"location":"html-css/css-layout/","title":"Cascading Style Sheets Layout","text":""},{"location":"html-css/css-layout/#css-layout-flexbox","title":"CSS Layout - Flexbox","text":""},{"location":"html-css/css-layout/#css-flex-model","title":"CSS Flex Model","text":"<ul> <li>Flex Container</li> <li>Flex Items</li> <li>Main axis </li> <li>Cross axis </li> </ul>"},{"location":"html-css/css-layout/#css-flex-container-properties","title":"CSS Flex Container Properties","text":"<ul> <li> <p>justify-contents: <code>flex-start</code> | <code>flex-end</code> | <code>center</code> | <code>space-between</code> | <code>space-around</code> | <code>space</code></p> <p><code>To align item on main-axis (horizontally)</code></p> </li> <li> <p>align-items: <code>stretch</code> | <code>flex-start</code> | <code>flex-end</code> | <code>center</code> | <code>baseline</code></p> <p><code>To align item on cross-axis (vertically)</code></p> </li> <li> <p>gap: <code>0</code> | <code>&lt;length&gt;</code></p> <p><code>To create</code><code>space between items,</code><code>without using margin</code></p> </li> </ul>"},{"location":"html-css/css/","title":"Cascading Style Sheets","text":""},{"location":"html-css/css/#important-topics","title":"Important Topics","text":"<ul> <li> <p>Inline, Internal and External CSS</p> </li> <li> <p>CSS Selectors</p> <ul> <li>Simple selectors <code>select elements based on name, id, class</code></li> <li>Combinator selectors <code>select elements based on a specific relationship between them</code><ul> <li>descendant selector <code>space</code></li> <li>child selector <code>&gt;</code></li> <li>adjacent sibling selector <code>+</code></li> <li>general sibling selector <code>~</code></li> </ul> </li> <li>Pseudo-class selectors <code>select elements based on a certain state</code></li> <li>Pseudo-elements selectors <code>select and style a part of an element</code></li> <li>Attribute selectors <code>select elements based on an attribute or attribute value</code></li> </ul> </li> <li> <p>CSS Pseudo-classes</p> <ul> <li>:link</li> <li>:visited</li> <li>:hover</li> <li>:active</li> <li>:focus</li> <li>:first-child</li> <li>:last-child</li> <li>:last-of-type</li> <li>:nth-child(n)</li> <li>:nth-last-child(n)</li> <li>:nth-last-of-type(n)</li> <li>:nth-of-type(n)</li> <li>:only-of-type</li> </ul> </li> <li> <p>CSS Pseudo-elements</p> <ul> <li>::before</li> <li>::after</li> <li>::first-letter</li> <li>::first-line</li> <li>::marker</li> <li>::selection</li> </ul> </li> <li> <p>Conflicts Between Selectors</p> <ul> <li>There are three reasons for CSS style conflict:<ul> <li>Specificity</li> <li>Inheritance</li> <li>!important</li> </ul> </li> <li>Specificity Hierarchy<ul> <li>Inline styles - Example: <code>&lt;h1 style=\"color: pink;\"&gt;</code></li> <li>IDs - Example: <code>#navbar</code></li> <li>Classes, pseudo-classes, attribute selectors - Example: <code>.test, :hover, [href]</code></li> <li>Elements and pseudo-elements - Example: <code>h1, ::before</code></li> </ul> </li> </ul> </li> <li> <p>CSS Conflict Resolution Rules</p> </li> <li> <p>Inheritance and the Universal Selector</p> </li> <li> <p>CSS Box Model</p> <ul> <li>Content - <code>The content of the box, where text and images appear</code></li> <li>Padding - <code>Clears an area around the content. The padding is transparent</code></li> <li>Border - <code>A border that goes around the padding and content</code></li> <li>Margin - <code>Clears an area outside the border. The margin is transparent</code></li> </ul> </li> <li> <p>Types of Box Models in CSS</p> <ul> <li>HTML Block and Inline Elements</li> <li>block</li> <li>inline</li> <li>inline-block</li> </ul> </li> <li> <p>CSS box-sizing property</p> <ul> <li>content-box - <code>Default</code></li> <li>border-box</li> <li>initial - <code>Sets this property to its default value</code></li> <li>inherit - <code>Inherits this property from its parent element</code></li> </ul> </li> <li> <p>CSS Layout - The position Property</p> <ul> <li>static</li> <li>relative</li> <li>absolute</li> <li>fixed</li> <li>sticky</li> </ul> </li> <li> <p>CSS Layout - Floats</p> </li> <li> <p>CSS Layout - Flexbox</p> <ul> <li>CSS Flex Model<ul> <li>Flex Container</li> <li>Flex Items</li> <li>Main axis </li> <li>Cross axis </li> </ul> </li> <li>CSS Flex Container Properties<ul> <li>display as flex</li> <li>flex-flow - <code>flex-flow property is a shorthand property for setting both the flex-direction and flex-wrap properties</code><ul> <li>flex-direction</li> <li>flex-wrap</li> </ul> </li> <li>justify-content - <code>align the grid content on main-axis (horizontally)</code></li> <li>align-content - <code>align the grid content on cross-axis (vertically)</code></li> <li>justify-items</li> <li>align-items</li> <li>gap</li> </ul> </li> <li>CSS Flex Items Properties<ul> <li>flex - <code>flex property is a shorthand property for the flex-grow, flex-shrink, and flex-basis properties</code><ul> <li>flex-grow</li> <li>flex-shrink</li> <li>flex-basis</li> </ul> </li> <li>justify-self</li> <li>align-self</li> <li>order</li> </ul> </li> </ul> </li> <li> <p>CSS Layout - Grid</p> <ul> <li> <p>CSS Grid Model</p> <ul> <li>Grid Container</li> <li>Grid Items</li> <li>Grid Axis<ul> <li>Block or Column Aaxis</li> <li>Inline or Row Axis</li> </ul> </li> <li>Grid Lines</li> <li>Grid Cell - <code>might be filled by a grid item or it can be empty</code></li> <li>Grid Tracks<ul> <li>Column Track</li> <li>Row Track</li> </ul> </li> <li>Gutters (gaps)</li> </ul> </li> <li> <p>CSS Grid Container Properties</p> <ul> <li>grid-template-columns</li> <li>grid-template-rows</li> <li>grid-template-areas</li> <li>justify-content</li> <li>align-content</li> <li>justify-items</li> <li>align-items</li> <li>gap <ul> <li>row-gap</li> <li>column-gap</li> </ul> </li> </ul> </li> <li> <p>CSS Grid Items Properties</p> <ul> <li>grid-column - <code>grid-column property is a shorthand property for the grid-column-start and grid-column-end properties</code><ul> <li>grid-column-start</li> <li>grid-column-end</li> </ul> </li> <li>grid-row - <code>grid-row property is a shorthand property for the grid-row-start and grid-row-end properties</code><ul> <li>grid-row-start</li> <li>grid-row-end</li> </ul> </li> <li>grid-area</li> <li>justify-self</li> <li>align-self</li> </ul> </li> </ul> </li> </ul>"},{"location":"html-css/html/","title":"HTML","text":""},{"location":"html-css/html/#html","title":"HTML","text":"<ul> <li>HTML elements</li> <li>Semantic HTML</li> </ul>"},{"location":"java/oops/","title":"OOP's (Object-Oriented Programming)","text":"<ul> <li>Inheritance (IS-A relationship)</li> <li>Polymorphism</li> <li>Abstraction (Implementation hiding)</li> <li>Encapsulation (Information / Data hiding)</li> </ul>"},{"location":"java/oops/#inheritance-is-a-relationship","title":"Inheritance (IS-A relationship)","text":"<p>Inheritance represents the IS-A relationship which is also known as a parent-child relationship.</p>"},{"location":"java/optional-class/","title":"Optional Class","text":"<p>Optional is a container object used to contain not-null objects. Optional object is used to represent null with absent value. This class has various utility methods to facilitate code to handle values as \u2018available\u2019 or \u2018not available\u2019 instead of checking null values. It is introduced in Java 8.</p>"},{"location":"java/optional-class/#javautiloptional-methods","title":"java.util.Optional Methods","text":""},{"location":"java/optional-class/#static-methods","title":"Static Methods","text":"<ul> <li>Optional.empty() - It returns an empty Optional object. No value is present for this Optional.</li> <li>Optional.of(T value) - It returns an Optional with the specified present non-null value.</li> <li>Optional.ofNullable(T value) - It returns an Optional describing the specified value, if non-null, otherwise returns an empty Optional.</li> </ul>"},{"location":"java/optional-class/#instance-methods","title":"Instance Methods","text":"<ul> <li>Optional.isPresent() -</li> <li>Optional.isEmpty() -</li> <li>Optional.get() -</li> <li>Optional.ifPresent(Consumer&lt;? super T&gt; consumer) -</li> <li>Optional.ifPresentOrElse\u200b(Consumer&lt;? super T&gt; action, Runnable emptyAction) -</li> <li>Optional.orElse(T other) -</li> <li>Optional.orElseGet(Supplier&lt;? extends T&gt; other) -</li> <li>Optional.orElseThrow() -</li> <li>Optional.orElseThrow(Supplier&lt;? extends X&gt; exceptionSupplier) -</li> <li>Optional.map(Function&lt;? super T,? extends U&gt; mapper) -</li> </ul>"},{"location":"java/optional-class/#optionalempty","title":"Optional.empty()","text":"<pre><code>Optional&lt;String&gt; empty = Optional.empty();\n\n</code></pre>"},{"location":"java/optional-class/#optionaloft-value","title":"Optional.of(T value)","text":"<pre><code>Optional&lt;String&gt; empty = Optional.empty();\n\n</code></pre>"},{"location":"java/optional-class/#optionalofnullablet-value","title":"Optional.ofNullable(T value)","text":"<pre><code>Optional&lt;String&gt; empty = Optional.empty();\n\n</code></pre>"},{"location":"java/optional-class/#other-optional-classes","title":"Other Optional classes <ul> <li>java.util.OptionalInt</li> <li>java.util.OptionalDouble</li> <li>java.util.OptionalLong</li> </ul>","text":""},{"location":"javascript/_index/","title":"JavaScript","text":""},{"location":"javascript/_index/#topics","title":"Topics","text":"<ul> <li>Strict equality (===)</li> <li>Destructuring</li> <li>NaN</li> <li>delete operator</li> <li>side effect</li> <li>Pure and Impure Functions</li> <li>arguments object</li> <li>Hoisting</li> <li>Closure</li> <li>lexical environment</li> <li>AbortController</li> <li>scope</li> <li>HTML script defer Attribute</li> <li>HTML script type modules</li> <li>JavaScript \"use strict\"</li> <li>callback vs promise</li> <li>Function bind() Method</li> <li>Currying</li> <li>Polyfill</li> </ul>"},{"location":"javascript/_index/#interview-questions","title":"Interview Questions","text":"<ul> <li>Top 100 JavaScript interview questions</li> </ul>"},{"location":"javascript/es6/_index/","title":"ECMAScript 6 (ES6)","text":""},{"location":"javascript/es6/_index/#topics","title":"Topics","text":"<ul> <li>Arrow Functions</li> <li>Default parameters</li> <li>Spread Operator</li> <li>Rest Parameters</li> <li>Destructuring Objects and Arrays</li> <li>Optional chaining (?.)</li> <li>Named Export vs Default Export</li> <li>Template Literals</li> <li>Ternaries Instead of if/else Statements</li> <li>Arrow Functions</li> <li>Short-Circuiting And Logical Operators: &amp;&amp;, ||, ??</li> <li>nullish coalescing ( ?? ) operator</li> <li>Optional Chaining</li> <li>Array Method</li> <li>map</li> <li>filter</li> <li>reduce</li> <li>sort</li> <li>Asynchronous JavaScript:</li> <li>Promises</li> <li>Async/Await</li> </ul>"},{"location":"javascript/es6/_index/#interview-questions","title":"Interview Questions","text":""},{"location":"react/_index/","title":"React","text":""},{"location":"react/_index/#topics","title":"Topics","text":"<ul> <li>StrictMode</li> <li>Props are immutable, while state is mutable</li> <li>Template literals</li> <li>Component Composition</li> <li>SyntheticEvent</li> <li>stale closure problem</li> <li>CSS Modules</li> <li>Pure Components</li> </ul>"},{"location":"react/_index/#topics-related-to-state","title":"Topics related to state","text":"<ul> <li>Derived State</li> <li>Stale state</li> </ul>"},{"location":"react/_index/#topics-related-to-props","title":"Topics related to props","text":"<ul> <li>Children Props</li> <li>PropTypes</li> <li>Prop Drilling Problem</li> <li>Fixing Prop Drilling With Component Composition</li> <li>Lifting State Up</li> <li>Key prop</li> </ul>"},{"location":"react/_index/#topics-related-how-react-works-under-the-hood","title":"Topics related How React works under the hood","text":"<ul> <li>Components, Components Instances and React Elements</li> <li>React Component Lifecycle</li> <li>Diffing Algorithm</li> <li>VirtualDOM</li> <li>Reconciliation</li> <li>State Update Batching</li> </ul>"},{"location":"react/_index/#interview-questions","title":"Interview Questions","text":""},{"location":"react/react-core/","title":"React Core","text":""},{"location":"react/react-core/#react-core-concepts","title":"React Core Concepts","text":"<p>There are three core concepts of React that you'll need to be familiar with to start building React applications. These are:</p> <ul> <li>Components</li> <li>Props</li> <li>State</li> </ul>"},{"location":"react/react-core/#hooks","title":"Hooks","text":"<ul> <li>useState</li> <li>useReducer</li> <li>useEffect</li> <li>useMemo</li> <li>useCallback</li> <li>useContext</li> <li>useRef</li> <li>useLayoutEffect</li> <li>useTransition</li> <li>useState vs useReducer vs useRef</li> </ul>"},{"location":"react/react-internal-working/","title":"React Render Internal Working","text":"<p>https://www.youtube.com/playlist?list=PLC3y8-rFHvwg7czgqpQIBEAHn8D6l530t</p> <p>Any screen update in a React app happens in three steps:</p> <ul> <li>Trigger</li> <li>Render</li> <li>Commit</li> </ul>"},{"location":"react/react-internal-working/#step-1-trigger-a-render","title":"Step 1: Trigger a render","text":"<p>There are two reasons for a component to render:</p> <ul> <li>It\u2019s the component\u2019s initial render.</li> <li>The component\u2019s (or one of its ancestors\u2019) state has been updated.</li> </ul>"},{"location":"react/react-internal-working/#step-2-react-renders-your-components","title":"Step 2: React renders your components","text":"<p>After you trigger a render, React calls your components to figure out what to display on screen. \u201cRendering\u201d is React calling your components.</p> <ul> <li>On initial render, React will call the root component.</li> <li>For subsequent renders, React will call the function component whose state update triggered the render.</li> </ul>"},{"location":"react/react-internal-working/#step-3-react-commits-changes-to-the-dom","title":"Step 3: React commits changes to the DOM","text":"<p>After rendering (calling) your components, React will modify the DOM.</p> <ul> <li>For the initial render, React will use the appendChild() DOM API to put all the DOM nodes it has created on screen.</li> <li>For re-renders, React will apply the minimal necessary operations (calculated while rendering!) to make the DOM match the latest rendering output.</li> </ul> <p>{{% notice note %}} You can use Strict Mode to find mistakes in your components.\\ React does not touch the DOM if the rendering result is the same as last time. {{% /notice %}}</p>"},{"location":"react/react-router/_index/","title":"React Router","text":""},{"location":"react/react-router/_index/#components","title":"Components","text":"<ul> <li>Routes</li> <li>Route</li> <li>Link</li> <li>NavLink</li> <li>Navigate</li> </ul>"},{"location":"react/react-router/_index/#hooks","title":"Hooks","text":"<ul> <li>useHistory</li> <li>useLocation</li> <li>useParams</li> <li>useNavigate</li> <li>useRouteMatch</li> </ul>"},{"location":"react/redux/_index/","title":"Redux","text":""},{"location":"react/redux/_index/#redux","title":"Redux","text":""}]}